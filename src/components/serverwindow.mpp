// Copyright 2021-2023 Aidan Sun and the Network Socket Terminal contributors
// SPDX-License-Identifier: GPL-3.0-or-later

module;
#include <atomic>
#include <functional>
#include <map>
#include <memory>
#include <string_view>
#include <utility>

export module components.serverwindow;
import components.console;
import components.ioconsole;
import components.window;
import sockets.delegates.delegates;
import sockets.socket;
import utils.task;

// Handles a connection-oriented server socket in a GUI window.
export class ServerWindow : public Window {
    struct Client {
        SocketPtr socket;
        Console console;
        int colorIndex;
        bool selected = true;
        bool opened = false;
        bool remove = false;
        std::atomic_bool pendingRecv = false;
        std::atomic_bool connected = true;

        Client(SocketPtr&& socket, int colorIndex) : socket(std::move(socket)), colorIndex(colorIndex) {}

        Task<> recv(IOConsole& serverConsole, std::string addr, unsigned int size);
    };

    SocketPtr socket;
    bool pendingAccept = false;
    int colorIndex = 0;
    std::map<std::string, Client, std::less<>> clients;
    IOConsole console;

    Task<> accept();

    void a();

    void onInit() override;

    void onBeforeUpdate() override;

    void onUpdate() override;

public:
    explicit ServerWindow(std::unique_ptr<Socket>&& socket) : Window("asdsa"), socket(std::move(socket)) {}

    ~ServerWindow() override {
        for (const auto& [_, client] : clients) client.socket->cancelIO();

        socket->cancelIO();
    }
};
