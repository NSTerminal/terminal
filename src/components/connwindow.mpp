// Copyright 2021-2023 Aidan Sun and the Network Socket Terminal contributors
// SPDX-License-Identifier: GPL-3.0-or-later

module;
#include <atomic>
#include <memory>
#include <string>
#include <string_view>

export module components.connwindow;
import components.ioconsole;
import components.window;
import net.device;
import sockets.socket;
import sockets.delegates.delegates;
import utils.task;

// Handles a socket connection in a GUI window.
export class ConnWindow : public Window {
    SocketPtr socket; // Internal socket
    IOConsole console;
    Device device;
    std::atomic_bool connected = false;
    std::atomic_bool pendingRecv = false;

    // Connects to the server.
    Task<> connect();

    // Sends a string through the socket.
    Task<> sendHandler(std::string s);

    // Receives a string from the socket and displays it in the console output.
    Task<> readHandler();

    void onInit() override {
        connect();
    }

    // Handles incoming I/O.
    void onBeforeUpdate() override;

    void onUpdate() override;

public:
    // Sets the window information (title and remote host).
    ConnWindow(SocketPtr&& socket, const Device& device, std::string_view extraInfo);

    // Cancels pending socket I/O.
    ~ConnWindow() override {
        socket->cancelIO();
    }
};
