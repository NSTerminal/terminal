// Copyright 2021-2024 Aidan Sun and the Network Socket Terminal contributors
// SPDX-License-Identifier: GPL-3.0-or-later

export module components.connwindow;
import components.ioconsole;
import components.window;
import external.std;
import net.device;
import sockets.socket;
import sockets.delegates.delegates;
import utils.task;

// Handles a socket connection in a GUI window.
export class ConnWindow : public Window {
    SocketPtr socket; // Internal socket
    IOConsole console;
    bool connected = false;
    bool pendingRecv = false;

    // Connects to the server.
    Task<> connect(Device device);

    // Sends a string through the socket.
    Task<> sendHandler(std::string s);

    // Receives a string from the socket and displays it in the console output.
    Task<> readHandler();

    // Handles incoming I/O.
    void onBeforeUpdate() override;

    void onUpdate() override;

public:
    ConnWindow(std::string_view title, bool useTLS, const Device& device, std::string_view);

    ~ConnWindow() override;
};
