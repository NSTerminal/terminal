// Copyright 2021-2023 Aidan Sun and the Network Socket Terminal contributors
// SPDX-License-Identifier: GPL-3.0-or-later

export module sockets.delegates.secure.clienttls;
import external.botan;
import external.std;
import sockets.delegates.bidirectional;
import sockets.delegates.client;
import sockets.delegates.delegates;
import sockets.delegates.sockethandle;
import net.device;
import net.enums;
import utils.task;

export namespace Delegates {
    // Manages operations on TLS client sockets.
    class ClientTLS : public HandleDelegate, public ClientDelegate, public IODelegate {
        std::unique_ptr<Botan::TLS::Client> channel;
        SocketHandle<SocketTag::IP> handle;
        Client<SocketTag::IP> baseClient{ handle };
        Bidirectional<SocketTag::IP> baseIO{ handle };

        std::queue<RecvResult> completedReads;
        std::queue<std::string> pendingWrites;

        // Sends all encrypted TLS data over the socket.
        Task<> sendQueued();

    public:
        ~ClientTLS() {
            close();
        }

        // Receives raw TLS data and passes it to the internal channel.
        Task<bool> recvBase(std::size_t size);

        void queueRead(std::string data) {
            completedReads.push({ true, false, data, std::nullopt });
        }

        void setAlert(Botan::TLS::Alert newAlert) {
            TLSAlert alert{ newAlert.type_string(), newAlert.is_fatal() };

            if (completedReads.empty()) completedReads.push({ true, false, "", alert });
            else completedReads.back().alert = alert;
        }

        void queueWrite(std::string data) {
            pendingWrites.push(data);
        }

        void close() override;

        bool isValid() override {
            return handle.isValid() && channel->is_active();
        }

        void cancelIO() override {
            handle.cancelIO();
        }

        Task<> connect(Device device) override;

        Task<> send(std::string data) override;

        Task<RecvResult> recv(std::size_t size) override;
    };
}
