// Copyright 2021-2023 Aidan Sun and the Network Socket Terminal contributors
// SPDX-License-Identifier: GPL-3.0-or-later

module;
#include <coroutine>
#include <stdexcept>

#if OS_WINDOWS
#if __clang__
#define NO_UNIQUE_ADDRESS // Not supported on Clang on Windows
#else
#define NO_UNIQUE_ADDRESS [[msvc::no_unique_address]]
#endif
#else
#define NO_UNIQUE_ADDRESS [[no_unique_address]]
#endif

export module sockets.delegates.server;
import net.device;
import net.enums;
import sockets.delegates.delegates;
import sockets.delegates.traits;
import sockets.delegates.sockethandle;
import utils.task;

export namespace Delegates {
    // Manages operations on server sockets.
    template <auto Tag>
    class Server : public ServerDelegate {
        SocketHandle<Tag>& handle;
        NO_UNIQUE_ADDRESS Traits::Server<Tag> traits;

        [[noreturn]] static void throwUnsupported() {
            throw std::invalid_argument{ "Operation not supported with socket type" };
        }

    public:
        explicit Server(SocketHandle<Tag>& handle) : handle(handle) {}

        ServerAddress startServer(const Device& serverInfo) override;

        Task<AcceptResult> accept() override;

        Task<DgramRecvResult> recvFrom(size_t size) override;

        Task<> sendTo(Device device, std::string data) override;
    };
}

template <>
ServerAddress Delegates::Server<SocketTag::BT>::startServer(const Device& serverInfo);

template <>
Task<AcceptResult> Delegates::Server<SocketTag::BT>::accept();

// There are no connectionless operations on Bluetooth sockets

template <>
Task<DgramRecvResult> Delegates::Server<SocketTag::BT>::recvFrom(size_t) {
    throwUnsupported();
}

template <>
Task<> Delegates::Server<SocketTag::BT>::sendTo(Device, std::string) {
    co_await std::suspend_never{}; // Indicate this is a coroutine and strings should be passed by value
    throwUnsupported();
}
