includes
    arpa/inet.h
    BluetoothMacOS-Swift.h
    cerrno
    CoreFoundation/CoreFoundation.h
    IOKit/IOReturn.h
    mach/mach_error.h
    netdb.h
    netinet/in.h
    sys/event.h
    sys/fcntl.h
    sys/socket.h
    swiftToCxx/_SwiftCxxInteroperability.h
    unistd.h

constants
    AI_NUMERICHOST
    NI_MAXHOST
    NI_MAXSERV
    NI_NUMERICHOST
    NI_NUMERICSERV

    AF_INET
    AF_INET6
    AF_UNSPEC
    SOCK_DGRAM
    SOCK_STREAM
    IPPROTO_UDP
    IPPROTO_TCP
    SOMAXCONN

    // Errors
    ECANCELED
    EINPROGRESS

    kIOReturnAborted
    kIOReturnSuccess
    kIOReturnError

    EVFILT_READ
    EVFILT_WRITE
    EVFILT_USER
    EV_ADD
    EV_ENABLE
    EV_DISABLE
    EV_DELETE
    EV_ONESHOT
    NOTE_FFLAGSMASK
    NOTE_TRIGGER
    EV_EOF

    F_GETFL
    F_SETFL
    O_NONBLOCK

    SHUT_RDWR

functions
    int& getErrno() -> return errno

    int GetAddrInfoW(const char* node, const char* service, const addrinfo* hints, addrinfo** res) -> return getaddrinfo(node, service, hints, res)
    void FreeAddrInfoW(addrinfo* res) -> freeaddrinfo(res)

    int GetNameInfoW(const sockaddr* addr, socklen_t addrlen, char* host, socklen_t hostlen, char* serv, socklen_t servlen, int flags) -> return getnameinfo(addr, addrlen, host, hostlen, serv, servlen, flags)

CFRunLoopRun
CFRunLoopStop
CFRunLoopGetCurrent

IOReturn
mach_error_string

AddrInfoType addrinfo
gai_strerror

sockaddr
sockaddr_in
sockaddr_in6
sockaddr_storage
socklen_t
getsockname
socket
bind
listen
send
recv
connect
shutdown
close
accept
sendto
recvfrom

kevent
kqueue

fcntl

ns swift
    UInt

    // For range-based loops with Array
    begin
    end

ns BluetoothMacOS
    getPairedDevices

    BTHandle
    BTHandleResult
    makeBTHandle

    makeBTServerHandle

    sdpLookup
    LookupResult
